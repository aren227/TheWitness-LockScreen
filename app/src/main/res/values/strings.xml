<resources>
    <string name="app_name">The Witness Lock Screen</string>

    <string name="vertex">
        uniform mat4 MVP;

        attribute vec4 aPosition;
        attribute vec4 aColor;

        varying vec4 vColor;

        void main() {
            gl_Position = MVP * aPosition;
            vColor = aColor;
        }
    </string>
    <string name="fragment">
        precision mediump float;

        varying vec4 vColor;

        void main() {
            gl_FragColor = vColor;
        }
    </string>
    <string name="vertex_fb">
        attribute vec4 aPosition;
        attribute vec2 aTextureCoord;

        varying vec2 vTextureCoord;

        void main() {
            gl_Position = aPosition;
            vTextureCoord = aTextureCoord;
        }
    </string>
    <string name="vertex_fb_gaussian_v">
        attribute vec4 aPosition;
        attribute vec2 aTextureCoord;

        uniform vec2 texel;

        varying vec2 vTextureCoord;
        varying vec4 vTextureCoord1;
        varying vec4 vTextureCoord2;

        void main() {
            gl_Position = aPosition;

            vec2 offset1 = vec2(0.0, texel.y * 4.0 * 1.38461538);
	        vec2 offset2 = vec2(0.0, texel.y * 4.0 * 3.23076923);

            vTextureCoord = aTextureCoord;
            vTextureCoord1.xy = aTextureCoord + offset1;
            vTextureCoord1.zw = aTextureCoord - offset1;
            vTextureCoord2.xy = aTextureCoord + offset2;
            vTextureCoord2.zw = aTextureCoord - offset2;
        }
    </string>
    <string name="vertex_fb_gaussian_h">
        attribute vec4 aPosition;
        attribute vec2 aTextureCoord;

        uniform vec2 texel;

        varying vec2 vTextureCoord;
        varying vec4 vTextureCoord1;
        varying vec4 vTextureCoord2;

        void main() {
            gl_Position = aPosition;

            vec2 offset1 = vec2(texel.x * 4.0 * 1.38461538, 0.0);
	        vec2 offset2 = vec2(texel.x * 4.0 * 3.23076923, 0.0);

            vTextureCoord = aTextureCoord;
            vTextureCoord1.xy = aTextureCoord + offset1;
            vTextureCoord1.zw = aTextureCoord - offset1;
            vTextureCoord2.xy = aTextureCoord + offset2;
            vTextureCoord2.zw = aTextureCoord - offset2;
        }
    </string>
    <string name="fragment_fb">
        precision mediump float;

        uniform sampler2D tex;

        varying vec2 vTextureCoord;

        void main() {
            gl_FragColor = texture2D(tex, vTextureCoord);
        }
    </string>
    <string name="fragment_fb_boxblur_downscale">
        precision mediump float;

        uniform sampler2D tex;
        uniform vec2 texel;

        varying vec2 vTextureCoord;

        void main() {
            vec4 o = texel.xyxy * vec2(-1.0, 1.0).xxyy;
            vec3 s = texture2D(tex, vTextureCoord + o.xy).rgb + texture2D(tex, vTextureCoord + o.zy).rgb +
                texture2D(tex, vTextureCoord + o.xw).rgb + texture2D(tex, vTextureCoord + o.zw).rgb;
            gl_FragColor = vec4(s * 0.25, 1.0);
        }
    </string>
    <string name="fragment_fb_boxblur_downscale_prelift">
        precision mediump float;

        uniform sampler2D tex;
        uniform vec2 texel;

        varying vec2 vTextureCoord;

        void main() {
            vec4 o = texel.xyxy * vec2(-1.0, 1.0).xxyy;
            vec4 s = texture2D(tex, vTextureCoord + o.xy) + texture2D(tex, vTextureCoord + o.zy) +
                texture2D(tex, vTextureCoord + o.xw) + texture2D(tex, vTextureCoord + o.zw);
            s *= 0.25;

            const float threshold = 0.7;
            const float soft_threshold = 0.2;

            float brightness = max(s.r, max(s.g, s.b));
			float contribution = brightness * brightness * brightness;

            gl_FragColor = vec4(s.rgb * contribution, 1.0);
        }
    </string>
    <string name="fragment_fb_boxblur_upscale">
        precision mediump float;

        uniform sampler2D source;
        uniform sampler2D tex;
        uniform vec2 texel;

        varying vec2 vTextureCoord;

        void main() {
            vec4 o = texel.xyxy * vec2(-0.5, 0.5).xxyy;
            vec3 s = texture2D(tex, vTextureCoord + o.xy).rgb + texture2D(tex, vTextureCoord + o.zy).rgb +
                texture2D(tex, vTextureCoord + o.xw).rgb + texture2D(tex, vTextureCoord + o.zw).rgb;
            vec3 r = texture2D(source, vTextureCoord).rgb;
            gl_FragColor = vec4(r + s * 0.25, 1.0);
        }
    </string>
    <string name="fragment_fb_boxblur_upscale_final">
        precision mediump float;

        uniform sampler2D source;
        uniform sampler2D tex;
        uniform vec2 texel;
        uniform float amount;

        varying vec2 vTextureCoord;

        void main() {
            vec4 o = texel.xyxy * vec2(0.0, 0.0).xxyy;
            vec3 s = texture2D(tex, vTextureCoord + o.xy).rgb + texture2D(tex, vTextureCoord + o.zy).rgb +
                texture2D(tex, vTextureCoord + o.xw).rgb + texture2D(tex, vTextureCoord + o.zw).rgb;
            s = s * 0.25;
            vec3 r = texture2D(source, vTextureCoord).rgb;
            gl_FragColor = vec4(r + s * amount, 1.0);
        }
    </string>
    <string name="fragment_fb_gaussian">
        precision mediump float;

        uniform sampler2D tex;

        varying vec2 vTextureCoord;
        varying vec4 vTextureCoord1;
        varying vec4 vTextureCoord2;

        void main() {
            vec3 sum = texture2D(tex, vTextureCoord).xyz * 0.22702702;
            sum += texture2D(tex, vTextureCoord1.xy).xyz * 0.31621621;
            sum += texture2D(tex, vTextureCoord1.zw).xyz * 0.31621621;
            sum += texture2D(tex, vTextureCoord2.xy).xyz * 0.07027027;
            sum += texture2D(tex, vTextureCoord2.zw).xyz * 0.07027027;
            gl_FragColor = vec4(sum, 1.0);
        }
    </string>
    <string name="fragment_fb_additive">
        precision mediump float;

        uniform sampler2D bg;
        uniform sampler2D overlay;

        varying vec2 vTextureCoord;

        void main() {
            vec4 b = texture2D(bg, vTextureCoord);
            vec4 o = texture2D(overlay, vTextureCoord);
            gl_FragColor = vec4(b.rgb * (1.0 - o.a) + o.rgb * o.a, 1.0);
        }
    </string>
    <string name="fragment_fb_additive_hdr">
        precision mediump float;

        uniform sampler2D bg;
        uniform sampler2D overlay;

        varying vec2 vTextureCoord;

        void main() {
            gl_FragColor = vec4(texture2D(bg, vTextureCoord).rgb * 0.0 + texture2D(overlay, vTextureCoord).rgb * 1.0, 1.0);
        }
    </string>
    <string name="fragment_fb_tonemapping">
        precision mediump float;

        uniform sampler2D hdrTex;

        varying vec2 vTextureCoord;

        void main() {
            const float white = 1.0;
            const float gamma = 2.2;
            vec3 hdrColor = texture2D(hdrTex, vTextureCoord).rgb;
            vec3 mapped = hdrColor * (vec3(1.0) + (hdrColor / (white * white))) / (hdrColor + vec3(1.0));
            gl_FragColor = vec4(hdrColor * 0.5, 1.0);
        }
    </string>
    <string name="update_msg">Current: %s\nLatest: %s</string>
    <string name="gallery_status">"%d Puzzles. %d Activated."</string>
    <string name="disclaimer1">This application is based on Jonathan Blow\'s video game, The Witness. All rights go to Jonathan Blow and Thekla, Inc.</string>
    <string name="disclaimer2">This application is just for fun and <b>can\'t protect your phone!</b> For security reasons, It is recommended to use a system lock screen together. You can disable a system lock screen completely for the best experience. Use it at your own risk. <b>This lock screen will be disabled after restarting your phone.</b> So if you are in a critical situation, just reboot your phone by holding the power button.</string>
    <string name="github_repo">asdf<a href="https://github.com/aren227/TheWitness-LockScreen">Github Repository</a></string>
</resources>
